1. When to use String vs. StringBuilder in C#?
In C#, String and StringBuilder are both used to handle text, but they serve different purposes. String is immutable, which means once a string is created, it cannot be changed. Every time you modify a String, a new string object is created, which can lead to performance issues if you're frequently concatenating or modifying strings, especially inside loops. In contrast, StringBuilder is mutable, meaning you can modify its content without creating a new object every time. This makes StringBuilder a better choice when you need to perform a lot of string manipulations or concatenations in your program. 
You’d typically use StringBuilder for operations like building a long string or when performance is critical (e.g., large-scale text manipulation).

2. What is the base class for all arrays in C#?
The base class for all arrays in C# is System.Array. This class provides common functionality for all array types, whether you're working with an array of integers (int[]), strings (string[]), or any other data type. System.Array provides useful methods such as Sort(), CopyTo(), and GetLength(), which are accessible to any array. This class acts as the foundation for array operations, ensuring that even though you're working with different types of arrays, they share common behaviors and can be manipulated in similar ways.

3. How do you sort an array in C#?
To sort an array in C#, you can use the Array.Sort() method. This method sorts the elements of the array in ascending order by default. It can be used with any type of array (e.g., integer arrays, string arrays) that implements the IComparable interface. If you want to sort the array in descending order or apply a custom sorting logic, you can pass a custom IComparer to the Array.Sort() method. For example, Array.Sort(myArray) will sort the array elements in ascending order, while Array.Sort(myArray, new DescendingComparer()) would sort them in descending order.

4. What property of an array object can be used to get the total number of elements in an array?
To get the total number of elements in an array, you can use the Length property. For example, if you have an array int[] numbers = {1, 2, 3, 4};, you can retrieve the number of elements using numbers.Length, which would return 4 in this case. This property provides the total count of elements in a one-dimensional array. If you're working with multi-dimensional arrays, you can also use GetLength(dimension) to get the length of a specific dimension.

5. Can you store multiple data types in System.Array?
In general, arrays in C# are designed to store elements of the same type. However, you can use System.Array to store different types of data by using an array of Object type (i.e., Object[]). The Object class is the base class for all types in C#, so an array of type Object[] can hold any type of data, whether it's integers, strings, custom objects, or any other type. While this approach allows mixed data types, it comes with trade-offs like needing to cast elements to their original types when accessing them, which can lead to runtime errors if done incorrectly.

6. What’s the difference between the System.Array.CopyTo() and System.Array.Clone()?
System.Array.CopyTo() and System.Array.Clone() are both used for copying arrays, but they behave differently. CopyTo() is used to copy the elements from one array to another existing array. It allows you to specify a starting index in the target array where the elements should be copied. For example, you could copy elements from one array to another starting from index 5. On the other hand, Array.Clone() creates a shallow copy of the entire array. This means it generates a new array with the same elements, but the new array is a separate object in memory. The key difference is that CopyTo() works with an already existing target array, while Clone() creates a new array and returns it. Additionally, Clone() only performs a shallow copy, meaning if the array contains references to objects, only the references are copied, not the actual objects themselves.